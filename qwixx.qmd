---
title: "Qwixx Dice Game Simulation"
format:
 html:
  self-contained: true
  embed-resources: true
editor: visual
execute:
 echo: true
 include: true
---

# Stat 321 Final Project - Qwixx Simulation

### Katherine Curro and Josie Peterburs

## Rules:

https://gamewright.com/pdfs/Rules/QwixxTM-RULES.pdf

**Goal:** Score the most points by crossing out as many numbers in the four color-rows as possible while avoiding penalty points.

**Contents:** 6 dice (2 white, 1 red, 1 green, 1 blue, 1 yellow) and a score pad

The one basic rule of Qwixx is that numbers must be crossed out from left to right in each of the four color-rows. You do not have to begin with the number farthest to the left, but if you skip any numbers, they cannot be crossed out afterward.

**How to Play:** The first player to roll a 6 takes on the role of "active player." The active player rolls all six dice. The following two actions are now carried out in order, always one after the other:

1.  The active player adds up the **two white dice** and calculates the resulting sum. All players may then (but are not required to) cross out the number that in any (but only one) of the color-rows.

2.  The active player (but not the others) may then (but is not required to) add **one of the white dice** together with any one of the colored dice and cross out the number corresponding to this sum in the color-row corresponding to the color of the chosen die.

**Penalties:** If, after the two actions, the active player doesn't cross out at least one number, they must cross out one of the penalty boxes. Each penalty box is worth -5 points at the end of the game. (The non-active players do not take a penalty if they choose not to cross out a number.)

**Locking a Row:** If you wish to cross out the number at the extreme right end of a color-row (red 12, yellow 12, green 2, blue 2) you must have first crossed out at least five numbers in that row. If you cross out the number on the extreme right, then also cross off the lock symbol directly next to it. This indicates that the color-row is now locked for all players and numbers of this color cannot be crossed out in future rounds. The die of the corresponding color is immediately removed from the game.

-   *Notes:*
    -   If a row is locked during the fi rst action, it is possible that other players may, at the same time, also cross out the number on the extreme right and lock the same color-row. These players must also have previously crossed out at least five numbers in that row.
    -   The cross on the lock counts toward the total number of crosses marked in that color-row.

**Ending the Game:** The game ends immediately as soon as either someone has marked a cross in his fourth penalty box or as soon as two dice have been removed from the game (two color-rows have been locked). It may occur (during the first action) that a third row is locked simultaneously with the second row.

**Scoring:** Beneath the four rows is a table indicating how many points are awarded for how many crosses within each row (including any locks marked with a cross). Each crossed out penalty box scores five minus-points. Enter your points for the four color-rows and the minus-points for any penalties in the appropriate fields at the bottom of the scoresheet. The player with the highest total score is the winner.

## Code

make playing and penalty card

```{r}
make_card <- function(){
  # the 13 in the red/yellow and the 1 in green/blue are the bonus row "locks"
  card <- matrix(c(2:13, 2:13, 12:1, 12:1), nrow = 4, ncol = 12, byrow = TRUE)
  rownames(card) <- c("red", "yellow", "green", "blue")
  return(card)
}
card_p1 <- make_card()
card_p1
```

calculate score for card

```{r}
card_score <- function(card, pen_card){
  score <- 0
  # for each row on the card
  for (row in 1:nrow(card)){
    # count NAs
    n <- sum(is.na(card[row,]))
    # calculate score for that row
    r_score <- n*(n+1)/2
    # add to card total score
    score <- score + r_score
  }
  
  # calculate penalty points (-5 for each box) and subtract from total
  pen_pts <- 5*(sum(pen_card))
  score <- score - pen_pts
  
  return(score)
}
```

roll dice

```{r}
roll <- function(){
  # roll each dice
  white1 <- sample(1:6, 1)
  white2 <- sample(1:6, 1)
  red <- sample(1:6, 1)
  yellow <- sample(1:6, 1)
  green <- sample(1:6, 1)
  blue <- sample(1:6, 1)

  # calculate all dice sums
  sums <- c(ww = white1 + white2, 
               w1r = white1 + red, 
               w2r = white2 + red, 
               w1y = white1 + yellow, 
               w2y = white2 + yellow, 
               w1g = white1 + green, 
               w2g = white2 + green, 
               w1b = white1 + blue, 
               w2b = white2 + blue)
  return(sums)
}

output <- roll()
```

### strategy 1 - mark as many boxes as possible

```{r}
# make cards
num_players <- 1
# score card
for(i in 1:num_players) {
  assign(paste0("card_p", i), make_card())
}
# penalty
for(i in 1:num_players) {
  assign(paste0("pen_p", i), 0)
}

# print cards to visualize
card_p1
pen_p1
```

# simplified qwixx - only one row

make playing and penalty card

```{r}
make_card <- function(){
  card <- matrix(2:13, nrow = 1, ncol = 12, byrow = TRUE)
  rownames(card) <- c("red")
  return(card)
}
card_p1 <- make_card()
card_p1
```

roll dice

```{r}
roll <- function(){
  # roll each dice
  white1 <- sample(1:6, 1)
  white2 <- sample(1:6, 1)
  red <- sample(1:6, 1)

  # calculate all dice sums
  sums <- c(ww = white1 + white2, 
               w1r = white1 + red, 
               w2r = white2 + red)
  return(sums)
}
```

### simulate game for one player (card only has one row)

strategy - take penalty if gap \> 3

# make cards

```{r}
num_players <- 1
# score card
for(i in 1:(num_players+1)) {
  assign(paste0("card_p", i-1), make_card())
}
# penalty
for(i in 1:num_players) {
  assign(paste0("pen_p", i), 0)
}

# print card to visualize
# card_p0 is a reference card
card_p1

locked <- 0

# run simulation
while(pen_p1 < 4 & locked < 1){
  # roll dice
  output <- roll()
    
  # sort sums lowest to highest (for red and yellow rows)
  best_move <- sort(output)
  
  # find right most NA value
    # which() function returns the index of the value which satisfies the condition
  result <- which(is.na(card_p1), arr.ind = TRUE)
  
  if (nrow(result) == 0){
    min_value <- 2
  } else{min_value <- card_p0[result[nrow(result),2]]} # use reference card to get value that is covered by NA
  
  # filter moves to values to the right of last NA
  moves <- best_move[best_move >= min_value]

  # make move
  
  # if no possible moves or gap > 3, take a penalty
  if (length(moves) == 0){
    pen_p1 <- pen_p1 + 1
  } else if (abs(moves[1] - min_value) > 3){
    pen_p1 <- pen_p1 + 1
  } else { 
    # play best move
    card_p1[card_p1 == moves[1]] <- NA
    
    # check if marked last number and # marked >= 5
    if (moves[1] == 12 & sum(is.na(card_p1[1,])) >= 5){
      card_p1[card_p1 == "lock"] <- NA
      locked <- 1
    }
  }
  card_p1
}

print("Final card and score")
card_p1
card_score(card_p1, pen_p1)
```

run simulation a bunch of times

```{r}
score_dist <- rep(NA, 1000)
card_p0 <- make_card()

for (i in 1:1000){
  card_p1 <- make_card()
  pen_p1 <- 0
  
  locked <- 0
  
  # run simulation
  while(pen_p1 < 4 & locked < 1){
    # roll dice
    output <- roll()
      
    # sort sums lowest to highest (for red and yellow rows)
    best_move <- sort(output)
    
    # find right most NA value
      # which() function returns the index of the value which satisfies the condition
    result <- which(is.na(card_p1), arr.ind = TRUE)
    
    if (nrow(result) == 0){
      min_value <- 2
    } else{min_value <- card_p0[result[nrow(result),2]]} # use reference card to get value that is covered by NA
    
    # filter moves to values to the right of last NA
    moves <- best_move[best_move >= min_value]
  
    # make move
    
    # if no possible moves or gap > 5, take a penalty
    if (length(moves) == 0){
      pen_p1 <- pen_p1 + 1
    } else if (abs(moves[1] - min_value) > 5){
      pen_p1 <- pen_p1 + 1
    } else { 
      # play best move
      card_p1[card_p1 == moves[1]] <- NA
      
      # check if marked last number and # marked >= 5
      if (moves[1] == 12 & sum(is.na(card_p1[1,])) >= 5){
        card_p1[card_p1 == "lock"] <- NA
        locked <- 1
      }
    }
  }
  score_dist[i] <- card_score(card_p1, pen_p1)
}

hist(score_dist)
```
